                                        13.Login User [part-1]

Here we are going to do :-
    1.make a call to the back end with crenditals using fetchApi
    2.hasing tha password and compared with thw stored password with db
    3. if comparsion success, we return user Id else empty Obj.



In views/login.js
        <%- include('partials/header'); -%>

        <form action="/signup">
          <h2>Login</h2>
          <label for="email">Email</label>
          <input type="text" name="email"  />
          <div class="email error"></div>
          <label for="password">Password</label>
          <input type="password" name="password"  />
          <div class="password error"></div>
          <button>login</button>
        </form>

        <%- include('partials/footer'); -%>

        <script>
          const form = document.querySelector('form');
          const emailError = document.querySelector('.email.error');
          const passwordError = document.querySelector('.password.error');
          form.addEventListener('submit', async (e) => {
            e.preventDefault();
            // reset errors
            emailError.textContent = '';
            passwordError.textContent = '';
            // get values
            const email = form.email.value;
            const password = form.password.value;
            try {
              const res = await fetch('/login', { 
                method: 'POST', 
                body: JSON.stringify({ email, password }),
                headers: {'Content-Type': 'application/json'}
              });
              const data = await res.json();
              console.log(data);
              if (data.errors) {
                emailError.textContent = data.errors.email;
                passwordError.textContent = data.errors.password;
              }
              if (data.user) {
                location.assign('/');
              }
            }
            catch (err) {
              console.log(err);
            }
          });
        </script>

    ///////////////////////////////////////////////////////////////////////////////
In model.userModel.js
    const mongoose = require('mongoose');
    const { isEmail } = require('validator');
    const bcrypt = require('bcrypt');

    const userSchema = new mongoose.Schema({
      email: {
        type: String,
        required: [true, 'Please enter an email'],
        unique: true,
        lowercase: true,
        validate: [isEmail, 'Please enter a valid email']
      },
      password: {
        type: String,
        required: [true, 'Please enter a password'],
        minlength: [6, 'Minimum password length is 6 characters'],
      }
    });


    // fire a function before doc saved to db
    userSchema.pre('save', async function(next) {
      const salt = await bcrypt.genSalt();
      this.password = await bcrypt.hash(this.password, salt);
      next();
    });

// static method to login user
userSchema.statics.login = async function(email, password) {
  const user = await this.findOne({ email }); //'this' refers to userModel/userCollection
  if (user) {
    const auth = await bcrypt.compare(password, user.password);
    if (auth) {
      return user;
    }
    throw Error('incorrect password');
  }
  throw Error('incorrect email');
};

const User = mongoose.model('user', userSchema);

module.exports = User;

//////////////////////////////////////////////////////////////////////////////////////////////////
In authController/controller.js
    const User = require("../models/User");
    const jwt = require('jsonwebtoken');

    // handle errors
    const handleErrors = (err) => {
      console.log(err.message, err.code);
      let errors = { email: '', password: '' };

      // duplicate email error
      if (err.code === 11000) {
        errors.email = 'that email is already registered';
        return errors;
      }

      // validation errors
      if (err.message.includes('user validation failed')) {
        // console.log(err);
        Object.values(err.errors).forEach(({ properties }) => {
          // console.log(val);
          // console.log(properties);
          errors[properties.path] = properties.message;
        });
      }

      return errors;
    }

    // create json web token
    const maxAge = 3 * 24 * 60 * 60;
    const createToken = (id) => {
      return jwt.sign({ id }, 'net ninja secret', {
        expiresIn: maxAge
      });
    };

    // controller actions
    module.exports.signup_get = (req, res) => {
      res.render('signup');
    }

    module.exports.login_get = (req, res) => {
      res.render('login');
    }

    module.exports.signup_post = async (req, res) => {
      const { email, password } = req.body;

      try {
        const user = await User.create({ email, password });
        const token = createToken(user._id);
        res.cookie('jwt', token, { httpOnly: true, maxAge: maxAge * 1000 });
        res.status(201).json({ user: user._id });
      }
      catch(err) {
        const errors = handleErrors(err);
        res.status(400).json({ errors });
      }
    
    }

    //****** Login controller ******
    module.exports.login_post = async (req, res) => {
      const { email, password } = req.body;

      try {
        const user = await User.login(email, password); // calling the function we created in the userModel.js
        res.status(200).json({ user: user._id });
      } catch (err) {
        res.status(400).json({});
      }

    }